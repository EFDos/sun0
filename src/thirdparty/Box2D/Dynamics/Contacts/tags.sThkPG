B2_CHAIN_AND_CIRCLE_CONTACT_H	b2ChainAndCircleContact.h	/^#define B2_CHAIN_AND_CIRCLE_CONTACT_H$/;"	d
b2ChainAndCircleContact	b2ChainAndCircleContact.h	/^class b2ChainAndCircleContact : public b2Contact$/;"	c
Create	b2ChainAndCircleContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2ChainAndCircleContact	typeref:typename:b2Contact *
Destroy	b2ChainAndCircleContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2ChainAndCircleContact	typeref:typename:void
b2ChainAndCircleContact	b2ChainAndCircleContact.h	/^	b2ChainAndCircleContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB);$/;"	p	class:b2ChainAndCircleContact
~b2ChainAndCircleContact	b2ChainAndCircleContact.h	/^	~b2ChainAndCircleContact() {}$/;"	f	class:b2ChainAndCircleContact
Evaluate	b2ChainAndCircleContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2ChainAndCircleContact	typeref:typename:void
B2_CHAIN_AND_POLYGON_CONTACT_H	b2ChainAndPolygonContact.h	/^#define B2_CHAIN_AND_POLYGON_CONTACT_H$/;"	d
b2ChainAndPolygonContact	b2ChainAndPolygonContact.h	/^class b2ChainAndPolygonContact : public b2Contact$/;"	c
Create	b2ChainAndPolygonContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2ChainAndPolygonContact	typeref:typename:b2Contact *
Destroy	b2ChainAndPolygonContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2ChainAndPolygonContact	typeref:typename:void
b2ChainAndPolygonContact	b2ChainAndPolygonContact.h	/^	b2ChainAndPolygonContact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB);$/;"	p	class:b2ChainAndPolygonContact
~b2ChainAndPolygonContact	b2ChainAndPolygonContact.h	/^	~b2ChainAndPolygonContact() {}$/;"	f	class:b2ChainAndPolygonContact
Evaluate	b2ChainAndPolygonContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2ChainAndPolygonContact	typeref:typename:void
B2_CIRCLE_CONTACT_H	b2CircleContact.h	/^#define B2_CIRCLE_CONTACT_H$/;"	d
b2CircleContact	b2CircleContact.h	/^class b2CircleContact : public b2Contact$/;"	c
Create	b2CircleContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2CircleContact	typeref:typename:b2Contact *
Destroy	b2CircleContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2CircleContact	typeref:typename:void
b2CircleContact	b2CircleContact.h	/^	b2CircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2CircleContact
~b2CircleContact	b2CircleContact.h	/^	~b2CircleContact() {}$/;"	f	class:b2CircleContact
Evaluate	b2CircleContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2CircleContact	typeref:typename:void
B2_CONTACT_H	b2Contact.h	/^#define B2_CONTACT_H$/;"	d
b2MixFriction	b2Contact.h	/^inline float32 b2MixFriction(float32 friction1, float32 friction2)$/;"	f	typeref:typename:float32
b2MixRestitution	b2Contact.h	/^inline float32 b2MixRestitution(float32 restitution1, float32 restitution2)$/;"	f	typeref:typename:float32
allocator	b2Contact.h	/^										b2BlockAllocator* allocator);$/;"	t	typeref:typename:b2Contact * b2ContactCreateFcn (b2Fixture * fixtureA,int32 indexA,b2Fixture * fixtureB,int32 indexB,b2BlockAllocator *)
allocator	b2Contact.h	/^typedef void b2ContactDestroyFcn(b2Contact* contact, b2BlockAllocator* allocator);$/;"	t	typeref:typename:void b2ContactDestroyFcn (b2Contact * contact,b2BlockAllocator *)
b2ContactRegister	b2Contact.h	/^struct b2ContactRegister$/;"	s
createFcn	b2Contact.h	/^	b2ContactCreateFcn* createFcn;$/;"	m	struct:b2ContactRegister	typeref:typename:b2ContactCreateFcn *
destroyFcn	b2Contact.h	/^	b2ContactDestroyFcn* destroyFcn;$/;"	m	struct:b2ContactRegister	typeref:typename:b2ContactDestroyFcn *
primary	b2Contact.h	/^	bool primary;$/;"	m	struct:b2ContactRegister	typeref:typename:bool
b2ContactEdge	b2Contact.h	/^struct b2ContactEdge$/;"	s
other	b2Contact.h	/^	b2Body* other;			\/\/\/< provides quick access to the other body attached.$/;"	m	struct:b2ContactEdge	typeref:typename:b2Body *
contact	b2Contact.h	/^	b2Contact* contact;		\/\/\/< the contact$/;"	m	struct:b2ContactEdge	typeref:typename:b2Contact *
prev	b2Contact.h	/^	b2ContactEdge* prev;	\/\/\/< the previous contact edge in the body's contact list$/;"	m	struct:b2ContactEdge	typeref:typename:b2ContactEdge *
next	b2Contact.h	/^	b2ContactEdge* next;	\/\/\/< the next contact edge in the body's contact list$/;"	m	struct:b2ContactEdge	typeref:typename:b2ContactEdge *
b2Contact	b2Contact.h	/^class b2Contact$/;"	c
GetManifold	b2Contact.h	/^	b2Manifold* GetManifold();$/;"	p	class:b2Contact	typeref:typename:b2Manifold *
GetManifold	b2Contact.h	/^	const b2Manifold* GetManifold() const;$/;"	p	class:b2Contact	typeref:typename:const b2Manifold *
GetWorldManifold	b2Contact.h	/^	void GetWorldManifold(b2WorldManifold* worldManifold) const;$/;"	p	class:b2Contact	typeref:typename:void
IsTouching	b2Contact.h	/^	bool IsTouching() const;$/;"	p	class:b2Contact	typeref:typename:bool
SetEnabled	b2Contact.h	/^	void SetEnabled(bool flag);$/;"	p	class:b2Contact	typeref:typename:void
IsEnabled	b2Contact.h	/^	bool IsEnabled() const;$/;"	p	class:b2Contact	typeref:typename:bool
GetNext	b2Contact.h	/^	b2Contact* GetNext();$/;"	p	class:b2Contact	typeref:typename:b2Contact *
GetNext	b2Contact.h	/^	const b2Contact* GetNext() const;$/;"	p	class:b2Contact	typeref:typename:const b2Contact *
GetFixtureA	b2Contact.h	/^	b2Fixture* GetFixtureA();$/;"	p	class:b2Contact	typeref:typename:b2Fixture *
GetFixtureA	b2Contact.h	/^	const b2Fixture* GetFixtureA() const;$/;"	p	class:b2Contact	typeref:typename:const b2Fixture *
GetChildIndexA	b2Contact.h	/^	int32 GetChildIndexA() const;$/;"	p	class:b2Contact	typeref:typename:int32
GetFixtureB	b2Contact.h	/^	b2Fixture* GetFixtureB();$/;"	p	class:b2Contact	typeref:typename:b2Fixture *
GetFixtureB	b2Contact.h	/^	const b2Fixture* GetFixtureB() const;$/;"	p	class:b2Contact	typeref:typename:const b2Fixture *
GetChildIndexB	b2Contact.h	/^	int32 GetChildIndexB() const;$/;"	p	class:b2Contact	typeref:typename:int32
SetFriction	b2Contact.h	/^	void SetFriction(float32 friction);$/;"	p	class:b2Contact	typeref:typename:void
GetFriction	b2Contact.h	/^	float32 GetFriction() const;$/;"	p	class:b2Contact	typeref:typename:float32
ResetFriction	b2Contact.h	/^	void ResetFriction();$/;"	p	class:b2Contact	typeref:typename:void
SetRestitution	b2Contact.h	/^	void SetRestitution(float32 restitution);$/;"	p	class:b2Contact	typeref:typename:void
GetRestitution	b2Contact.h	/^	float32 GetRestitution() const;$/;"	p	class:b2Contact	typeref:typename:float32
ResetRestitution	b2Contact.h	/^	void ResetRestitution();$/;"	p	class:b2Contact	typeref:typename:void
SetTangentSpeed	b2Contact.h	/^	void SetTangentSpeed(float32 speed);$/;"	p	class:b2Contact	typeref:typename:void
GetTangentSpeed	b2Contact.h	/^	float32 GetTangentSpeed() const;$/;"	p	class:b2Contact	typeref:typename:float32
Evaluate	b2Contact.h	/^	virtual void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB) = 0/;"	p	class:b2Contact	typeref:typename:void
__anond9446e1b0103	b2Contact.h	/^	{$/;"	g	class:b2Contact
e_islandFlag	b2Contact.h	/^		e_islandFlag		= 0x0001,$/;"	e	enum:b2Contact::__anond9446e1b0103
e_touchingFlag	b2Contact.h	/^		e_touchingFlag		= 0x0002,$/;"	e	enum:b2Contact::__anond9446e1b0103
e_enabledFlag	b2Contact.h	/^		e_enabledFlag		= 0x0004,$/;"	e	enum:b2Contact::__anond9446e1b0103
e_filterFlag	b2Contact.h	/^		e_filterFlag		= 0x0008,$/;"	e	enum:b2Contact::__anond9446e1b0103
e_bulletHitFlag	b2Contact.h	/^		e_bulletHitFlag		= 0x0010,$/;"	e	enum:b2Contact::__anond9446e1b0103
e_toiFlag	b2Contact.h	/^		e_toiFlag			= 0x0020$/;"	e	enum:b2Contact::__anond9446e1b0103
FlagForFiltering	b2Contact.h	/^	void FlagForFiltering();$/;"	p	class:b2Contact	typeref:typename:void
AddType	b2Contact.h	/^	static void AddType(b2ContactCreateFcn* createFcn, b2ContactDestroyFcn* destroyFcn,$/;"	p	class:b2Contact	typeref:typename:void
InitializeRegisters	b2Contact.h	/^	static void InitializeRegisters();$/;"	p	class:b2Contact	typeref:typename:void
Create	b2Contact.h	/^	static b2Contact* Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, /;"	p	class:b2Contact	typeref:typename:b2Contact *
Destroy	b2Contact.h	/^	static void Destroy(b2Contact* contact, b2Shape::Type typeA, b2Shape::Type typeB, b2BlockAlloca/;"	p	class:b2Contact	typeref:typename:void
Destroy	b2Contact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2Contact	typeref:typename:void
b2Contact	b2Contact.h	/^	b2Contact() : m_fixtureA(NULL), m_fixtureB(NULL) {}$/;"	f	class:b2Contact
b2Contact	b2Contact.h	/^	b2Contact(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB);$/;"	p	class:b2Contact
~b2Contact	b2Contact.h	/^	virtual ~b2Contact() {}$/;"	f	class:b2Contact
Update	b2Contact.h	/^	void Update(b2ContactListener* listener);$/;"	p	class:b2Contact	typeref:typename:void
s_registers	b2Contact.h	/^	static b2ContactRegister s_registers[b2Shape::e_typeCount][b2Shape::e_typeCount];$/;"	m	class:b2Contact	typeref:typename:b2ContactRegister[][]
s_initialized	b2Contact.h	/^	static bool s_initialized;$/;"	m	class:b2Contact	typeref:typename:bool
m_flags	b2Contact.h	/^	uint32 m_flags;$/;"	m	class:b2Contact	typeref:typename:uint32
m_prev	b2Contact.h	/^	b2Contact* m_prev;$/;"	m	class:b2Contact	typeref:typename:b2Contact *
m_next	b2Contact.h	/^	b2Contact* m_next;$/;"	m	class:b2Contact	typeref:typename:b2Contact *
m_nodeA	b2Contact.h	/^	b2ContactEdge m_nodeA;$/;"	m	class:b2Contact	typeref:typename:b2ContactEdge
m_nodeB	b2Contact.h	/^	b2ContactEdge m_nodeB;$/;"	m	class:b2Contact	typeref:typename:b2ContactEdge
m_fixtureA	b2Contact.h	/^	b2Fixture* m_fixtureA;$/;"	m	class:b2Contact	typeref:typename:b2Fixture *
m_fixtureB	b2Contact.h	/^	b2Fixture* m_fixtureB;$/;"	m	class:b2Contact	typeref:typename:b2Fixture *
m_indexA	b2Contact.h	/^	int32 m_indexA;$/;"	m	class:b2Contact	typeref:typename:int32
m_indexB	b2Contact.h	/^	int32 m_indexB;$/;"	m	class:b2Contact	typeref:typename:int32
m_manifold	b2Contact.h	/^	b2Manifold m_manifold;$/;"	m	class:b2Contact	typeref:typename:b2Manifold
m_toiCount	b2Contact.h	/^	int32 m_toiCount;$/;"	m	class:b2Contact	typeref:typename:int32
m_toi	b2Contact.h	/^	float32 m_toi;$/;"	m	class:b2Contact	typeref:typename:float32
m_friction	b2Contact.h	/^	float32 m_friction;$/;"	m	class:b2Contact	typeref:typename:float32
m_restitution	b2Contact.h	/^	float32 m_restitution;$/;"	m	class:b2Contact	typeref:typename:float32
m_tangentSpeed	b2Contact.h	/^	float32 m_tangentSpeed;$/;"	m	class:b2Contact	typeref:typename:float32
GetManifold	b2Contact.h	/^inline b2Manifold* b2Contact::GetManifold()$/;"	f	class:b2Contact	typeref:typename:b2Manifold *
GetManifold	b2Contact.h	/^inline const b2Manifold* b2Contact::GetManifold() const$/;"	f	class:b2Contact	typeref:typename:const b2Manifold *
GetWorldManifold	b2Contact.h	/^inline void b2Contact::GetWorldManifold(b2WorldManifold* worldManifold) const$/;"	f	class:b2Contact	typeref:typename:void
SetEnabled	b2Contact.h	/^inline void b2Contact::SetEnabled(bool flag)$/;"	f	class:b2Contact	typeref:typename:void
IsEnabled	b2Contact.h	/^inline bool b2Contact::IsEnabled() const$/;"	f	class:b2Contact	typeref:typename:bool
IsTouching	b2Contact.h	/^inline bool b2Contact::IsTouching() const$/;"	f	class:b2Contact	typeref:typename:bool
GetNext	b2Contact.h	/^inline b2Contact* b2Contact::GetNext()$/;"	f	class:b2Contact	typeref:typename:b2Contact *
GetNext	b2Contact.h	/^inline const b2Contact* b2Contact::GetNext() const$/;"	f	class:b2Contact	typeref:typename:const b2Contact *
GetFixtureA	b2Contact.h	/^inline b2Fixture* b2Contact::GetFixtureA()$/;"	f	class:b2Contact	typeref:typename:b2Fixture *
GetFixtureA	b2Contact.h	/^inline const b2Fixture* b2Contact::GetFixtureA() const$/;"	f	class:b2Contact	typeref:typename:const b2Fixture *
GetFixtureB	b2Contact.h	/^inline b2Fixture* b2Contact::GetFixtureB()$/;"	f	class:b2Contact	typeref:typename:b2Fixture *
GetChildIndexA	b2Contact.h	/^inline int32 b2Contact::GetChildIndexA() const$/;"	f	class:b2Contact	typeref:typename:int32
GetFixtureB	b2Contact.h	/^inline const b2Fixture* b2Contact::GetFixtureB() const$/;"	f	class:b2Contact	typeref:typename:const b2Fixture *
GetChildIndexB	b2Contact.h	/^inline int32 b2Contact::GetChildIndexB() const$/;"	f	class:b2Contact	typeref:typename:int32
FlagForFiltering	b2Contact.h	/^inline void b2Contact::FlagForFiltering()$/;"	f	class:b2Contact	typeref:typename:void
SetFriction	b2Contact.h	/^inline void b2Contact::SetFriction(float32 friction)$/;"	f	class:b2Contact	typeref:typename:void
GetFriction	b2Contact.h	/^inline float32 b2Contact::GetFriction() const$/;"	f	class:b2Contact	typeref:typename:float32
ResetFriction	b2Contact.h	/^inline void b2Contact::ResetFriction()$/;"	f	class:b2Contact	typeref:typename:void
SetRestitution	b2Contact.h	/^inline void b2Contact::SetRestitution(float32 restitution)$/;"	f	class:b2Contact	typeref:typename:void
GetRestitution	b2Contact.h	/^inline float32 b2Contact::GetRestitution() const$/;"	f	class:b2Contact	typeref:typename:float32
ResetRestitution	b2Contact.h	/^inline void b2Contact::ResetRestitution()$/;"	f	class:b2Contact	typeref:typename:void
SetTangentSpeed	b2Contact.h	/^inline void b2Contact::SetTangentSpeed(float32 speed)$/;"	f	class:b2Contact	typeref:typename:void
GetTangentSpeed	b2Contact.h	/^inline float32 b2Contact::GetTangentSpeed() const$/;"	f	class:b2Contact	typeref:typename:float32
B2_CONTACT_SOLVER_H	b2ContactSolver.h	/^#define B2_CONTACT_SOLVER_H$/;"	d
b2VelocityConstraintPoint	b2ContactSolver.h	/^struct b2VelocityConstraintPoint$/;"	s
rA	b2ContactSolver.h	/^	b2Vec2 rA;$/;"	m	struct:b2VelocityConstraintPoint	typeref:typename:b2Vec2
rB	b2ContactSolver.h	/^	b2Vec2 rB;$/;"	m	struct:b2VelocityConstraintPoint	typeref:typename:b2Vec2
normalImpulse	b2ContactSolver.h	/^	float32 normalImpulse;$/;"	m	struct:b2VelocityConstraintPoint	typeref:typename:float32
tangentImpulse	b2ContactSolver.h	/^	float32 tangentImpulse;$/;"	m	struct:b2VelocityConstraintPoint	typeref:typename:float32
normalMass	b2ContactSolver.h	/^	float32 normalMass;$/;"	m	struct:b2VelocityConstraintPoint	typeref:typename:float32
tangentMass	b2ContactSolver.h	/^	float32 tangentMass;$/;"	m	struct:b2VelocityConstraintPoint	typeref:typename:float32
velocityBias	b2ContactSolver.h	/^	float32 velocityBias;$/;"	m	struct:b2VelocityConstraintPoint	typeref:typename:float32
b2ContactVelocityConstraint	b2ContactSolver.h	/^struct b2ContactVelocityConstraint$/;"	s
points	b2ContactSolver.h	/^	b2VelocityConstraintPoint points[b2_maxManifoldPoints];$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:b2VelocityConstraintPoint[]
normal	b2ContactSolver.h	/^	b2Vec2 normal;$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:b2Vec2
normalMass	b2ContactSolver.h	/^	b2Mat22 normalMass;$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:b2Mat22
K	b2ContactSolver.h	/^	b2Mat22 K;$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:b2Mat22
indexA	b2ContactSolver.h	/^	int32 indexA;$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:int32
indexB	b2ContactSolver.h	/^	int32 indexB;$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:int32
invMassA	b2ContactSolver.h	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:float32
invMassB	b2ContactSolver.h	/^	float32 invMassA, invMassB;$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:float32
invIA	b2ContactSolver.h	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:float32
invIB	b2ContactSolver.h	/^	float32 invIA, invIB;$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:float32
friction	b2ContactSolver.h	/^	float32 friction;$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:float32
restitution	b2ContactSolver.h	/^	float32 restitution;$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:float32
tangentSpeed	b2ContactSolver.h	/^	float32 tangentSpeed;$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:float32
pointCount	b2ContactSolver.h	/^	int32 pointCount;$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:int32
contactIndex	b2ContactSolver.h	/^	int32 contactIndex;$/;"	m	struct:b2ContactVelocityConstraint	typeref:typename:int32
b2ContactSolverDef	b2ContactSolver.h	/^struct b2ContactSolverDef$/;"	s
step	b2ContactSolver.h	/^	b2TimeStep step;$/;"	m	struct:b2ContactSolverDef	typeref:typename:b2TimeStep
contacts	b2ContactSolver.h	/^	b2Contact** contacts;$/;"	m	struct:b2ContactSolverDef	typeref:typename:b2Contact **
count	b2ContactSolver.h	/^	int32 count;$/;"	m	struct:b2ContactSolverDef	typeref:typename:int32
positions	b2ContactSolver.h	/^	b2Position* positions;$/;"	m	struct:b2ContactSolverDef	typeref:typename:b2Position *
velocities	b2ContactSolver.h	/^	b2Velocity* velocities;$/;"	m	struct:b2ContactSolverDef	typeref:typename:b2Velocity *
allocator	b2ContactSolver.h	/^	b2StackAllocator* allocator;$/;"	m	struct:b2ContactSolverDef	typeref:typename:b2StackAllocator *
b2ContactSolver	b2ContactSolver.h	/^class b2ContactSolver$/;"	c
b2ContactSolver	b2ContactSolver.h	/^	b2ContactSolver(b2ContactSolverDef* def);$/;"	p	class:b2ContactSolver
~b2ContactSolver	b2ContactSolver.h	/^	~b2ContactSolver();$/;"	p	class:b2ContactSolver
InitializeVelocityConstraints	b2ContactSolver.h	/^	void InitializeVelocityConstraints();$/;"	p	class:b2ContactSolver	typeref:typename:void
WarmStart	b2ContactSolver.h	/^	void WarmStart();$/;"	p	class:b2ContactSolver	typeref:typename:void
SolveVelocityConstraints	b2ContactSolver.h	/^	void SolveVelocityConstraints();$/;"	p	class:b2ContactSolver	typeref:typename:void
StoreImpulses	b2ContactSolver.h	/^	void StoreImpulses();$/;"	p	class:b2ContactSolver	typeref:typename:void
SolvePositionConstraints	b2ContactSolver.h	/^	bool SolvePositionConstraints();$/;"	p	class:b2ContactSolver	typeref:typename:bool
SolveTOIPositionConstraints	b2ContactSolver.h	/^	bool SolveTOIPositionConstraints(int32 toiIndexA, int32 toiIndexB);$/;"	p	class:b2ContactSolver	typeref:typename:bool
m_step	b2ContactSolver.h	/^	b2TimeStep m_step;$/;"	m	class:b2ContactSolver	typeref:typename:b2TimeStep
m_positions	b2ContactSolver.h	/^	b2Position* m_positions;$/;"	m	class:b2ContactSolver	typeref:typename:b2Position *
m_velocities	b2ContactSolver.h	/^	b2Velocity* m_velocities;$/;"	m	class:b2ContactSolver	typeref:typename:b2Velocity *
m_allocator	b2ContactSolver.h	/^	b2StackAllocator* m_allocator;$/;"	m	class:b2ContactSolver	typeref:typename:b2StackAllocator *
m_positionConstraints	b2ContactSolver.h	/^	b2ContactPositionConstraint* m_positionConstraints;$/;"	m	class:b2ContactSolver	typeref:typename:b2ContactPositionConstraint *
m_velocityConstraints	b2ContactSolver.h	/^	b2ContactVelocityConstraint* m_velocityConstraints;$/;"	m	class:b2ContactSolver	typeref:typename:b2ContactVelocityConstraint *
m_contacts	b2ContactSolver.h	/^	b2Contact** m_contacts;$/;"	m	class:b2ContactSolver	typeref:typename:b2Contact **
m_count	b2ContactSolver.h	/^	int m_count;$/;"	m	class:b2ContactSolver	typeref:typename:int
B2_EDGE_AND_CIRCLE_CONTACT_H	b2EdgeAndCircleContact.h	/^#define B2_EDGE_AND_CIRCLE_CONTACT_H$/;"	d
b2EdgeAndCircleContact	b2EdgeAndCircleContact.h	/^class b2EdgeAndCircleContact : public b2Contact$/;"	c
Create	b2EdgeAndCircleContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2EdgeAndCircleContact	typeref:typename:b2Contact *
Destroy	b2EdgeAndCircleContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2EdgeAndCircleContact	typeref:typename:void
b2EdgeAndCircleContact	b2EdgeAndCircleContact.h	/^	b2EdgeAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2EdgeAndCircleContact
~b2EdgeAndCircleContact	b2EdgeAndCircleContact.h	/^	~b2EdgeAndCircleContact() {}$/;"	f	class:b2EdgeAndCircleContact
Evaluate	b2EdgeAndCircleContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2EdgeAndCircleContact	typeref:typename:void
B2_EDGE_AND_POLYGON_CONTACT_H	b2EdgeAndPolygonContact.h	/^#define B2_EDGE_AND_POLYGON_CONTACT_H$/;"	d
b2EdgeAndPolygonContact	b2EdgeAndPolygonContact.h	/^class b2EdgeAndPolygonContact : public b2Contact$/;"	c
Create	b2EdgeAndPolygonContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2EdgeAndPolygonContact	typeref:typename:b2Contact *
Destroy	b2EdgeAndPolygonContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2EdgeAndPolygonContact	typeref:typename:void
b2EdgeAndPolygonContact	b2EdgeAndPolygonContact.h	/^	b2EdgeAndPolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2EdgeAndPolygonContact
~b2EdgeAndPolygonContact	b2EdgeAndPolygonContact.h	/^	~b2EdgeAndPolygonContact() {}$/;"	f	class:b2EdgeAndPolygonContact
Evaluate	b2EdgeAndPolygonContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2EdgeAndPolygonContact	typeref:typename:void
B2_POLYGON_AND_CIRCLE_CONTACT_H	b2PolygonAndCircleContact.h	/^#define B2_POLYGON_AND_CIRCLE_CONTACT_H$/;"	d
b2PolygonAndCircleContact	b2PolygonAndCircleContact.h	/^class b2PolygonAndCircleContact : public b2Contact$/;"	c
Create	b2PolygonAndCircleContact.h	/^	static b2Contact* Create(b2Fixture* fixtureA, int32 indexA, b2Fixture* fixtureB, int32 indexB, /;"	p	class:b2PolygonAndCircleContact	typeref:typename:b2Contact *
Destroy	b2PolygonAndCircleContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2PolygonAndCircleContact	typeref:typename:void
b2PolygonAndCircleContact	b2PolygonAndCircleContact.h	/^	b2PolygonAndCircleContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2PolygonAndCircleContact
~b2PolygonAndCircleContact	b2PolygonAndCircleContact.h	/^	~b2PolygonAndCircleContact() {}$/;"	f	class:b2PolygonAndCircleContact
Evaluate	b2PolygonAndCircleContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2PolygonAndCircleContact	typeref:typename:void
B2_POLYGON_CONTACT_H	b2PolygonContact.h	/^#define B2_POLYGON_CONTACT_H$/;"	d
b2PolygonContact	b2PolygonContact.h	/^class b2PolygonContact : public b2Contact$/;"	c
Create	b2PolygonContact.h	/^	static b2Contact* Create(	b2Fixture* fixtureA, int32 indexA,$/;"	p	class:b2PolygonContact	typeref:typename:b2Contact *
Destroy	b2PolygonContact.h	/^	static void Destroy(b2Contact* contact, b2BlockAllocator* allocator);$/;"	p	class:b2PolygonContact	typeref:typename:void
b2PolygonContact	b2PolygonContact.h	/^	b2PolygonContact(b2Fixture* fixtureA, b2Fixture* fixtureB);$/;"	p	class:b2PolygonContact
~b2PolygonContact	b2PolygonContact.h	/^	~b2PolygonContact() {}$/;"	f	class:b2PolygonContact
Evaluate	b2PolygonContact.h	/^	void Evaluate(b2Manifold* manifold, const b2Transform& xfA, const b2Transform& xfB);$/;"	p	class:b2PolygonContact	typeref:typename:void
